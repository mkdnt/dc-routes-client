[{"/Users/MikeDent/projects/Thinkful/dc-routes-client/src/index.js":"1","/Users/MikeDent/projects/Thinkful/dc-routes-client/src/RouteComponents/App.js":"2","/Users/MikeDent/projects/Thinkful/dc-routes-client/src/RouteComponents/HomePage.js":"3","/Users/MikeDent/projects/Thinkful/dc-routes-client/src/RouteComponents/AddNew.js":"4","/Users/MikeDent/projects/Thinkful/dc-routes-client/src/RouteComponents/RouteContext.js":"5","/Users/MikeDent/projects/Thinkful/dc-routes-client/src/RouteComponents/RouteItem.js":"6","/Users/MikeDent/projects/Thinkful/dc-routes-client/src/Navigation/Nav.js":"7","/Users/MikeDent/projects/Thinkful/dc-routes-client/src/Navigation/Header.js":"8","/Users/MikeDent/projects/Thinkful/dc-routes-client/src/RouteComponents/RoutesList.js":"9","/Users/MikeDent/projects/Thinkful/dc-routes-client/src/Navigation/Footer.js":"10","/Users/MikeDent/projects/Thinkful/dc-routes-client/src/RouteComponents/Route.js":"11","/Users/MikeDent/projects/Thinkful/dc-routes-client/src/Error.js":"12","/Users/MikeDent/projects/Thinkful/dc-routes-client/src/config.js":"13","/Users/MikeDent/projects/Thinkful/dc-routes-client/src/ValidationError.js":"14"},{"size":281,"mtime":1609798421203,"results":"15","hashOfConfig":"16"},{"size":2686,"mtime":1609797439644,"results":"17","hashOfConfig":"16"},{"size":930,"mtime":1609797439645,"results":"18","hashOfConfig":"16"},{"size":8941,"mtime":1609797439640,"results":"19","hashOfConfig":"16"},{"size":153,"mtime":1609797728999,"results":"20","hashOfConfig":"16"},{"size":11059,"mtime":1609798654790,"results":"21","hashOfConfig":"16"},{"size":587,"mtime":1609797930258,"results":"22","hashOfConfig":"16"},{"size":374,"mtime":1609797956376,"results":"23","hashOfConfig":"16"},{"size":7198,"mtime":1609797439648,"results":"24","hashOfConfig":"16"},{"size":240,"mtime":1609797986087,"results":"25","hashOfConfig":"16"},{"size":1208,"mtime":1609455142006,"results":"26","hashOfConfig":"16"},{"size":447,"mtime":1609426501884,"results":"27","hashOfConfig":"16"},{"size":146,"mtime":1609454155273,"results":"28","hashOfConfig":"16"},{"size":233,"mtime":1609426502606,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1v4b44v",{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"35"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"/Users/MikeDent/projects/Thinkful/dc-routes-client/src/index.js",[],"/Users/MikeDent/projects/Thinkful/dc-routes-client/src/RouteComponents/App.js",["61","62"],"import React, { Component } from \"react\";\nimport RouteContext from \"./RouteContext\";\nimport { Route, Switch } from \"react-router-dom\";\nimport api from \"../config\";\nimport Header from \"../Navigation/Header\";\nimport Nav from \"../Navigation/Nav\";\nimport HomePage from \"./HomePage\";\nimport AddNew from \"./AddNew\";\nimport RoutesList from \"./RoutesList\";\nimport RouteItem from \"./RouteItem\";\nimport Footer from \"../Navigation/Footer\";\nimport \"./App.css\";\nimport Error from \"../Error\";\n\nexport class App extends Component {\n  state = {\n    routes: [],\n    addRoute: this.handleAddRoute,\n    editRoute: this.handleEditRoute,\n    deleteRoute: this.handleDeleteRoute,\n  };\n\n  componentDidMount() {\n    fetch(`${api.API_ENDPOINT}/route`, {\n      method: \"GET\",\n      headers: {\n        \"content-type\": \"application/json\",\n        Authorization: `Bearer ${api.API_KEY}`,\n      },\n    })\n      .then((res) => {\n        if (!res.ok) {\n          throw new Error(\"Something went wrong, please try again.\");\n        }\n        return res;\n      })\n      .then((res) => res.json())\n      .then((data) => {\n        this.setState({\n          routes: data,\n        });\n      })\n      .catch((error) => {\n        console.error({ error });\n      });\n  }\n\n  handleAddRoute = (route) => {\n    this.setState({\n      routes: [...this.state.routes, route],\n    });\n  };\n\n  handleDeleteRoute = (routeId) => {\n    const newRoutes = this.state.routes.filter((route) => route.id != routeId);\n    this.setState({\n      routes: newRoutes,\n    });\n  };\n\n  handleEditRoute = (editedRoute) => {\n    this.setState({\n      routes: this.state.routes.map((route) =>\n        route.id != editedRoute.id ? route : editedRoute\n      ),\n    });\n  };\n\n  render() {\n    const value = {\n      routes: this.state.routes,\n      addRoute: this.handleAddRoute,\n      editRoute: this.handleEditRoute,\n      deleteRoute: this.handleDeleteRoute,\n    };\n\n    return (\n      <Error>\n        <RouteContext.Provider value={value}>\n          <div className=\"app\">\n            <header>\n              <Header />\n            </header>\n            <nav>\n              <Nav />\n            </nav>\n            <main>\n              <Switch>\n                <Route exact path=\"/\" component={HomePage} />\n                <Route exact path=\"/addNew\" component={AddNew} />\n                <Route exact path=\"/route\" component={RoutesList} />\n                <Route\n                  exact\n                  path=\"/route/byid/:routeId\"\n                  component={RouteItem}\n                />\n              </Switch>\n            </main>\n            <Footer />\n          </div>\n        </RouteContext.Provider>\n      </Error>\n    );\n  }\n}\n\nexport default App;\n",["63","64"],"/Users/MikeDent/projects/Thinkful/dc-routes-client/src/RouteComponents/HomePage.js",[],"/Users/MikeDent/projects/Thinkful/dc-routes-client/src/RouteComponents/AddNew.js",["65"],"import React, { Component } from \"react\";\nimport RouteContext from \"./RouteContext\";\nimport api from \"../config\";\nimport PropTypes from \"prop-types\";\nimport ValidationError from \"../ValidationError\";\nimport \"./AddNew.css\";\n\nexport class AddNew extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      route_name: {\n        value: \"\",\n        touched: false,\n      },\n      dc_area: {\n        value: \"\",\n        touched: false,\n      },\n      distance: {\n        value: 0,\n        touched: false,\n      },\n      difficulty: {\n        value: \"\",\n        touched: false,\n      },\n      route_type: {\n        value: \"\",\n        touched: false,\n      },\n      route_description: {\n        value: \"\",\n        touched: false,\n      },\n    };\n  }\n\n  static contextType = RouteContext;\n\n  static propTypes = {\n    onSubmit: PropTypes.func,\n    onClick: PropTypes.func,\n    route: PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      route_name: PropTypes.string.isRequired,\n      dc_area: PropTypes.string.isRequired,\n      distance: PropTypes.number.isRequired,\n      difficulty: PropTypes.string.isRequired,\n      route_type: PropTypes.string.isRequired,\n      route_description: PropTypes.string.isRequired,\n    }),\n  };\n\n  handleClickCancel = () => {\n    this.props.history.push(\"/route\");\n  };\n\n  //validate all form information\n\n  updateRouteName(name) {\n    this.setState({ route_name: { value: name, touched: true } });\n  }\n\n  validateRouteName() {\n    const name = this.state.route_name.value.trim();\n    if (name.length === 0) {\n      return \"Route Name is required\";\n    } else if (name.length < 3) {\n      return \"Route Name must be at least 3 characters long\";\n    }\n  }\n\n  updateDcArea(area) {\n    this.setState({ dc_area: { value: area, touched: true } });\n  }\n\n  validateDcArea() {\n    const dc_area = this.state.dc_area.value.trim();\n    if (dc_area.length === 0) {\n      return \"DC Area is required\";\n    }\n  }\n\n  updateDistance(distance) {\n    this.setState({ distance: { value: distance, touched: true } });\n  }\n\n  validateDistance() {\n    const distance = this.state.distance.value;\n    if (distance === 0 || NaN) {\n      return \"Distance is required, and must be a number greater than 0\";\n    }\n  }\n\n  updateDifficulty(difficulty) {\n    this.setState({ difficulty: { value: difficulty, touched: true } });\n  }\n\n  validateDifficulty() {\n    const difficulty = this.state.difficulty.value.trim();\n    if (difficulty.length === 0) {\n      return \"Difficulty is required\";\n    }\n  }\n\n  updateRouteType(type) {\n    this.setState({ route_type: { value: type, touched: true } });\n  }\n\n  validateRouteType() {\n    const type = this.state.route_type.value.trim();\n    if (type.length === 0) {\n      return \"Route Type is required\";\n    }\n  }\n\n  updateRouteDescription(description) {\n    this.setState({ route_description: { value: description, touched: true } });\n  }\n\n  validateRouteDescription() {\n    const description = this.state.route_description.value.trim();\n    if (description.length === 0) {\n      return \"Route Description is required\";\n    } else if (description.length < 10) {\n      return \"Route Description must be at least 10 characters long\";\n    }\n  }\n\n  render() {\n    const routeNameError = this.validateRouteName();\n    const dcAreaError = this.validateDcArea();\n    const distanceError = this.validateDistance();\n    const difficultyError = this.validateDifficulty();\n    const routeTypeError = this.validateRouteType();\n    const routeDescriptionError = this.validateRouteDescription();\n\n    const handleSubmit = (event) => {\n      event.preventDefault();\n      const newRoute = {\n        route_name: event.target[\"new-route-name\"].value,\n        dc_area: event.target[\"dc_area\"].value,\n        distance: event.target[\"new-route-distance\"].value,\n        difficulty: event.target[\"difficulty\"].value,\n        route_type: event.target[\"type\"].value,\n        route_description: event.target[\"new-route-description\"].value,\n        editable: false,\n      };\n\n      fetch(`${api.API_ENDPOINT}/route`, {\n        method: \"POST\",\n        headers: {\n          \"content-type\": \"application/json\",\n          Authorization: `Bearer ${api.API_KEY}`,\n        },\n        body: JSON.stringify(newRoute),\n      })\n        .then((res) => {\n          if (!res.ok) return res.json().then((e) => Promise.reject(e));\n          return res.json();\n        })\n        .then((route) => {\n          this.context.addRoute(route);\n          this.props.history.push(`/route/byid/${route.id}`);\n        })\n        .catch((error) => {\n          console.error({ error });\n        });\n    };\n\n    return (\n      <div>\n        <h1>_add new route</h1>\n        <section className=\"add-new-form\">\n          <form onSubmit={handleSubmit}>\n            <label htmlFor=\"new-route-name\">Route Name</label>\n            <input\n              type=\"text\"\n              id=\"new-route-name\"\n              name=\"new-route-name\"\n              onChange={(e) => this.updateRouteName(e.target.value)}\n            />\n            {this.state.route_name.touched && (\n              <ValidationError message={routeNameError} />\n            )}\n\n            <hr\n              style={{\n                width: \"75%\",\n                border: \" 1px solid #011328\",\n                backgroundColor: \"#011328\",\n              }}\n            />\n\n            <select\n              name=\"dc_area\"\n              id=\"dc_area\"\n              onChange={(e) => this.updateDcArea(e.target.value)}\n            >\n              <option value={null}>DC Area:</option>\n              <option value=\"Northeast\">Northeast</option>\n              <option value=\"Southeast\">Southeast</option>\n              <option value=\"Northwest\">Northwest</option>\n              <option value=\"Southwest\">Southwest</option>\n            </select>\n            {this.state.dc_area.touched && (\n              <ValidationError message={dcAreaError} />\n            )}\n\n            <select\n              name=\"difficulty\"\n              id=\"difficulty\"\n              onChange={(e) => this.updateDifficulty(e.target.value)}\n            >\n              <option value={null}>Difficulty:</option>\n              <option value=\"Low\">Low</option>\n              <option value=\"Medium\">Medium</option>\n              <option value=\"High\">High</option>\n            </select>\n            {this.state.difficulty.touched && (\n              <ValidationError message={difficultyError} />\n            )}\n\n            <select\n              name=\"type\"\n              id=\"type\"\n              onChange={(e) => this.updateRouteType(e.target.value)}\n            >\n              <option value={null}>Type:</option>\n              <option value=\"City Streets\">City Streets</option>\n              <option value=\"Residential\">Residential</option>\n              <option value=\"Trail/Path\">Trail/Path</option>\n            </select>\n            {this.state.route_type.touched && (\n              <ValidationError message={routeTypeError} />\n            )}\n\n            <hr\n              style={{\n                width: \"75%\",\n                border: \" 1px solid #011328\",\n                backgroundColor: \"#011328\",\n              }}\n            />\n\n            <label htmlFor=\"new-route-distance\">Distance (miles)</label>\n            <input\n              style={{ width: \"30px\" }}\n              type=\"text\"\n              id=\"new-route-distance\"\n              name=\"new-route-distance\"\n              onChange={(e) => this.updateDistance(e.target.value)}\n            />\n            {this.state.distance.touched && (\n              <ValidationError message={distanceError} />\n            )}\n\n            <hr\n              style={{\n                width: \"75%\",\n                border: \" 1px solid #011328\",\n                backgroundColor: \"#011328\",\n              }}\n            />\n\n            <label htmlFor=\"\">Description</label>\n            <textarea\n              type=\"text\"\n              id=\"new-route-description\"\n              name=\"new-route-description\"\n              onChange={(e) => this.updateRouteDescription(e.target.value)}\n            ></textarea>\n            {this.state.route_description.touched && (\n              <ValidationError message={routeDescriptionError} />\n            )}\n\n            <br />\n            <button\n              className=\"buttons\"\n              disabled={\n                this.validateRouteName() ||\n                this.validateDcArea() ||\n                this.validateDistance() ||\n                this.validateDifficulty() ||\n                this.validateRouteType() ||\n                this.validateRouteDescription()\n              }\n            >\n              Submit\n            </button>\n            <button\n              className=\"buttons\"\n              onClick={this.handleClickCancel}\n              className=\"buttons\"\n            >\n              Cancel\n            </button>\n          </form>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default AddNew;\n","/Users/MikeDent/projects/Thinkful/dc-routes-client/src/RouteComponents/RouteContext.js",[],"/Users/MikeDent/projects/Thinkful/dc-routes-client/src/RouteComponents/RouteItem.js",["66"],"/Users/MikeDent/projects/Thinkful/dc-routes-client/src/Navigation/Nav.js",[],"/Users/MikeDent/projects/Thinkful/dc-routes-client/src/Navigation/Header.js",[],"/Users/MikeDent/projects/Thinkful/dc-routes-client/src/RouteComponents/RoutesList.js",[],"/Users/MikeDent/projects/Thinkful/dc-routes-client/src/Navigation/Footer.js",[],"/Users/MikeDent/projects/Thinkful/dc-routes-client/src/RouteComponents/Route.js",[],"/Users/MikeDent/projects/Thinkful/dc-routes-client/src/Error.js",[],"/Users/MikeDent/projects/Thinkful/dc-routes-client/src/config.js",[],"/Users/MikeDent/projects/Thinkful/dc-routes-client/src/ValidationError.js",[],{"ruleId":"67","severity":1,"message":"68","line":55,"column":68,"nodeType":"69","messageId":"70","endLine":55,"endColumn":70},{"ruleId":"67","severity":1,"message":"68","line":64,"column":18,"nodeType":"69","messageId":"70","endLine":64,"endColumn":20},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":295,"column":15,"nodeType":"77","endLine":295,"endColumn":34},{"ruleId":"75","severity":1,"message":"76","line":364,"column":17,"nodeType":"77","endLine":364,"endColumn":36},"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-native-reassign",["78"],"no-negated-in-lhs",["79"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation"]