[{"/Users/MikeDent/projects/Thinkful/dc-routes-client/src/index.js":"1","/Users/MikeDent/projects/Thinkful/dc-routes-client/src/RouteComponents/App.js":"2","/Users/MikeDent/projects/Thinkful/dc-routes-client/src/RouteComponents/HomePage.js":"3","/Users/MikeDent/projects/Thinkful/dc-routes-client/src/RouteComponents/AddNew.js":"4","/Users/MikeDent/projects/Thinkful/dc-routes-client/src/RouteComponents/RouteContext.js":"5","/Users/MikeDent/projects/Thinkful/dc-routes-client/src/RouteComponents/RouteItem.js":"6","/Users/MikeDent/projects/Thinkful/dc-routes-client/src/Navigation/Nav.js":"7","/Users/MikeDent/projects/Thinkful/dc-routes-client/src/Navigation/Header.js":"8","/Users/MikeDent/projects/Thinkful/dc-routes-client/src/RouteComponents/RoutesList.js":"9","/Users/MikeDent/projects/Thinkful/dc-routes-client/src/Navigation/Footer.js":"10","/Users/MikeDent/projects/Thinkful/dc-routes-client/src/RouteComponents/Route.js":"11","/Users/MikeDent/projects/Thinkful/dc-routes-client/src/Error.js":"12","/Users/MikeDent/projects/Thinkful/dc-routes-client/src/config.js":"13","/Users/MikeDent/projects/Thinkful/dc-routes-client/src/ValidationError.js":"14"},{"size":278,"mtime":1609264579100,"results":"15","hashOfConfig":"16"},{"size":2688,"mtime":1609435678892,"results":"17","hashOfConfig":"16"},{"size":914,"mtime":1609371262808,"results":"18","hashOfConfig":"16"},{"size":9232,"mtime":1609435678892,"results":"19","hashOfConfig":"16"},{"size":158,"mtime":1609366450220,"results":"20","hashOfConfig":"16"},{"size":11696,"mtime":1609435603096,"results":"21","hashOfConfig":"16"},{"size":622,"mtime":1609372271831,"results":"22","hashOfConfig":"16"},{"size":417,"mtime":1609351159209,"results":"23","hashOfConfig":"16"},{"size":7673,"mtime":1609435389108,"results":"24","hashOfConfig":"16"},{"size":268,"mtime":1609351159209,"results":"25","hashOfConfig":"16"},{"size":1246,"mtime":1609365743330,"results":"26","hashOfConfig":"16"},{"size":447,"mtime":1609426501884,"results":"27","hashOfConfig":"16"},{"size":123,"mtime":1609430956745,"results":"28","hashOfConfig":"16"},{"size":233,"mtime":1609426502606,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1v4b44v",{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"/Users/MikeDent/projects/Thinkful/dc-routes-client/src/index.js",[],["60","61"],"/Users/MikeDent/projects/Thinkful/dc-routes-client/src/RouteComponents/App.js",["62","63"],"/Users/MikeDent/projects/Thinkful/dc-routes-client/src/RouteComponents/HomePage.js",[],"/Users/MikeDent/projects/Thinkful/dc-routes-client/src/RouteComponents/AddNew.js",["64"],"import React, { Component } from 'react'\nimport RouteContext from './RouteContext'\nimport api from '../System/config'\nimport PropTypes from 'prop-types'\nimport ValidationError from '../System/ValidationError'\nimport './AddNew.css'\n\nexport class AddNew extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            route_name: {\n                value: '',\n                touched: false\n            },\n            dc_area: {\n                value: '',\n                touched: false\n            },\n            distance: {\n                value: 0,\n                touched: false\n            },\n            difficulty: {\n                value: '',\n                touched: false\n            },\n            route_type: {\n                value: '',\n                touched: false\n            },\n            route_description: {\n                value: '',\n                touched: false\n            },\n        }\n    }\n    \n    static contextType = RouteContext\n\n    static propTypes = {\n        onSubmit: PropTypes.func,\n        onClick: PropTypes.func,\n        route: PropTypes.shape({\n            id: PropTypes.number.isRequired,\n            route_name: PropTypes.string.isRequired,\n            dc_area: PropTypes.string.isRequired,\n            distance: PropTypes.number.isRequired,\n            difficulty: PropTypes.string.isRequired,\n            route_type: PropTypes.string.isRequired,\n            route_description: PropTypes.string.isRequired\n        })\n    }\n\n    handleClickCancel = () => {\n        this.props.history.push('/route')\n    }\n\n    updateRouteName(name) {\n        this.setState({route_name: {value: name, touched: true}})\n    }\n\n    validateRouteName(){\n        const name = this.state.route_name.value.trim();\n        if (name.length === 0) {\n            return 'Route Name is required';\n        } else if (name.length < 3) {\n            return 'Route Name must be at least 3 characters long';\n        }\n    }\n\n    updateDcArea(area) {\n        this.setState({dc_area: {value: area, touched: true}})\n    }\n\n    validateDcArea(){\n        const dc_area = this.state.dc_area.value.trim();\n        if (dc_area.length === 0) {\n            return 'DC Area is required';\n        }\n    }\n\n    updateDistance(distance) {\n        this.setState({distance: {value: distance, touched: true}})\n    }\n\n    validateDistance(){\n        const distance = this.state.distance.value;\n        if (distance === 0 || NaN) {\n            return 'Distance is required, and must be a number greater than 0';\n        }\n    }\n\n    updateDifficulty(difficulty) {\n        this.setState({difficulty: {value: difficulty, touched: true}})\n    }\n\n    validateDifficulty(){\n        const difficulty = this.state.difficulty.value.trim();\n        if (difficulty.length === 0) {\n            return 'Difficulty is required';\n        }\n    }\n\n    updateRouteType(type) {\n        this.setState({route_type: {value: type, touched: true}})\n    }\n\n    validateRouteType(){\n        const type = this.state.route_type.value.trim();\n        if (type.length === 0) {\n            return 'Route Type is required';\n        }\n    }\n\n    updateRouteDescription(description) {\n        this.setState({route_description: {value: description, touched: true}})\n    }\n\n    validateRouteDescription(){\n        const description = this.state.route_description.value.trim();\n        if (description.length === 0) {\n            return 'Route Description is required';\n        } else if (description.length < 10) {\n            return 'Route Description must be at least 10 characters long';\n        }\n    }\n\n    render() {\n        const routeNameError = this.validateRouteName();\n        const dcAreaError = this.validateDcArea();\n        const distanceError = this.validateDistance();\n        const difficultyError = this.validateDifficulty();\n        const routeTypeError = this.validateRouteType();\n        const routeDescriptionError = this.validateRouteDescription();\n\n        const handleSubmit = (event) => {\n            event.preventDefault();\n            const newRoute = {\n                route_name: event.target['new-route-name'].value,\n                dc_area: event.target['dc_area'].value,\n                distance: event.target['new-route-distance'].value,\n                difficulty: event.target['difficulty'].value,\n                route_type: event.target['type'].value,\n                route_description: event.target['new-route-description'].value,\n                editable: false\n            }\n            console.log(newRoute)\n            fetch(`${api.API_ENDPOINT}/route`, {\n                method: 'POST',\n                headers: {\n                    'content-type': 'application/json'\n                },\n                body: JSON.stringify(newRoute),\n            })\n                .then(res => {\n                    if (!res.ok)\n                        return res.json().then(e => Promise.reject(e))\n                        return res.json()\n                })\n                .then(route => {\n                    this.context.addRoute(route)\n                    this.props.history.push(`/route/byid/${route.id}`)\n                })\n                .catch(error => {\n                    console.error({error})\n                })\n                //error message here, not console\n        }\n\n        return (\n            <div>\n                <h1>_add new route</h1>\n        <section className='add-new-form'>\n            <form onSubmit={handleSubmit}>\n                \n                <label htmlFor='new-route-name'>Route Name</label>\n                <input type=\"text\"\n                id='new-route-name'\n                name='new-route-name'\n                onChange={e=> this.updateRouteName(e.target.value)} />\n                {this.state.route_name.touched && <ValidationError message={routeNameError}/>}\n                \n                <hr style={{width: '75%', border: ' 1px solid #011328', backgroundColor: '#011328' }}/>\n                \n                <select name=\"dc_area\" id=\"dc_area\" onChange={e=> this.updateDcArea(e.target.value)}>\n                    <option value={null}>DC Area:</option>\n                    <option value=\"Northeast\">Northeast</option>\n                    <option value=\"Southeast\">Southeast</option>\n                    <option value=\"Northwest\">Northwest</option>\n                    <option value=\"Southwest\">Southwest</option>\n                </select>\n                {this.state.dc_area.touched && <ValidationError message={dcAreaError}/>}\n                \n                \n                <select name=\"difficulty\" id=\"difficulty\" onChange={e=> this.updateDifficulty(e.target.value)}>\n                    <option value={null}>Difficulty:</option>\n                    <option value=\"Low\">Low</option>\n                    <option value=\"Medium\">Medium</option>\n                    <option value=\"High\">High</option>\n                </select>\n                {this.state.difficulty.touched && <ValidationError message={difficultyError}/>}\n                \n                \n                \n                <select name=\"type\" id=\"type\" onChange={e=> this.updateRouteType(e.target.value)}>\n                    <option value={null}>Type:</option>\n                    <option value=\"City Streets\">City Streets</option>\n                    <option value=\"Residential\">Residential</option>\n                    <option value=\"Trail/Path\">Trail/Path</option>\n                </select>\n                {this.state.route_type.touched && <ValidationError message={routeTypeError}/>}\n                \n                <hr style={{width: '75%', border: ' 1px solid #011328', backgroundColor: '#011328' }}/>\n                \n                <label htmlFor=\"new-route-distance\">Distance (miles)</label>\n                <input style={{width: '30px'}}type=\"text\"\n                id='new-route-distance'\n                name='new-route-distance' \n                onChange={e=> this.updateDistance(e.target.value)}/>\n                {this.state.distance.touched && <ValidationError message={distanceError}/>}\n                \n                <hr style={{width: '75%', border: ' 1px solid #011328', backgroundColor: '#011328' }}/>\n                \n                <label htmlFor=\"\">Description</label>\n                <textarea type=\"text\"\n                id='new-route-description'\n                name='new-route-description'\n                onChange={e=> this.updateRouteDescription(e.target.value)}></textarea>\n                {this.state.route_description.touched && <ValidationError message={routeDescriptionError}/>}\n                \n                <br />\n                <button className='buttons'\n                disabled={\n                    this.validateRouteName() ||\n                    this.validateDcArea() ||\n                    this.validateDistance() ||\n                    this.validateDifficulty() ||\n                    this.validateRouteType() ||\n                    this.validateRouteDescription()\n                }\n                >Submit</button>\n                <button className='buttons' onClick={this.handleClickCancel} className='buttons'>Cancel</button>\n            </form>\n        </section>\n            </div>\n        )\n    }\n}\n\nexport default AddNew\n","/Users/MikeDent/projects/Thinkful/dc-routes-client/src/RouteComponents/RouteContext.js",[],"/Users/MikeDent/projects/Thinkful/dc-routes-client/src/RouteComponents/RouteItem.js",["65"],"/Users/MikeDent/projects/Thinkful/dc-routes-client/src/Navigation/Nav.js",[],"/Users/MikeDent/projects/Thinkful/dc-routes-client/src/Navigation/Header.js",[],"/Users/MikeDent/projects/Thinkful/dc-routes-client/src/RouteComponents/RoutesList.js",[],"/Users/MikeDent/projects/Thinkful/dc-routes-client/src/Navigation/Footer.js",[],"/Users/MikeDent/projects/Thinkful/dc-routes-client/src/RouteComponents/Route.js",[],"/Users/MikeDent/projects/Thinkful/dc-routes-client/src/Error.js",[],"/Users/MikeDent/projects/Thinkful/dc-routes-client/src/config.js",[],"/Users/MikeDent/projects/Thinkful/dc-routes-client/src/ValidationError.js",[],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":61,"column":66,"nodeType":"72","messageId":"73","endLine":61,"endColumn":68},{"ruleId":"70","severity":1,"message":"71","line":70,"column":19,"nodeType":"72","messageId":"73","endLine":70,"endColumn":21},{"ruleId":"74","severity":1,"message":"75","line":243,"column":78,"nodeType":"76","endLine":243,"endColumn":97},{"ruleId":"74","severity":1,"message":"75","line":320,"column":78,"nodeType":"76","endLine":320,"endColumn":97},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation"]